{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyTorch Assignment: Convolutional Neural Network (CNN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Duke Community Standard](http://integrity.duke.edu/standard.html): By typing your name below, you are certifying that you have adhered to the Duke Community Standard in completing this assignment.**\n",
    "\n",
    "Name: Mohammad Mahbubur Rahman Khan Mamun"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convolutional Neural Network\n",
    "\n",
    "Adapt the CNN example for MNIST digit classfication from Notebook 3A. \n",
    "Feel free to play around with the model architecture and see how the training time/performance changes, but to begin, try the following:\n",
    "\n",
    "Image ->  \n",
    "convolution (32 3x3 filters) -> nonlinearity (ReLU) ->  \n",
    "convolution (32 3x3 filters) -> nonlinearity (ReLU) -> (2x2 max pool) ->  \n",
    "convolution (64 3x3 filters) -> nonlinearity (ReLU) ->  \n",
    "convolution (64 3x3 filters) -> nonlinearity (ReLU) -> (2x2 max pool) -> flatten ->\n",
    "fully connected (256 hidden units) -> nonlinearity (ReLU) ->  \n",
    "fully connected (10 hidden units) -> softmax \n",
    "\n",
    "Note: The CNN model might take a while to train. Depending on your machine, you might expect this to take up to half an hour. If you see your validation performance start to plateau, you can kill the training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### YOUR CODE HERE ###\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from tqdm.notebook import tqdm\n",
    "import numpy as np\n",
    "from torchvision import datasets,transforms\n",
    "import torch.optim as optim\n",
    "\n",
    "trainset = datasets.MNIST(download=True,train=True,root='./dataset',transform=transforms.ToTensor())\n",
    "testset = datasets.MNIST(download=True,train=False,root='./dataset',transform=transforms.ToTensor())\n",
    "\n",
    "trainloader = torch.utils.data.DataLoader(trainset,batch_size=100,shuffle=True)\n",
    "testloader = torch.utils.data.DataLoader(testset,batch_size=100,shuffle=False)\n",
    "\n",
    "class CNN_NEW(nn.Module):\n",
    "  def __init__(self):\n",
    "    super().__init__()\n",
    "    self.conv1 = nn.Conv2d(1,32,kernel_size=3)\n",
    "    self.conv2 = nn.Conv2d(32,32,kernel_size=3)\n",
    "    self.conv3 = nn.Conv2d(32,64,kernel_size=3)\n",
    "    self.conv4 = nn.Conv2d(64,64,kernel_size=3)\n",
    "    self.fc1 = nn.Linear(20736,256)\n",
    "    self.fc2 = nn.Linear(256,10)\n",
    "\n",
    "  def forward(self,X):\n",
    "    X = F.relu(self.conv1(X))\n",
    "    X = F.relu(self.conv2(X))\n",
    "    max_pool = nn.MaxPool2d(2,1)\n",
    "    X = max_pool(X)\n",
    "    X = F.relu(self.conv3(X))\n",
    "    X = F.relu(self.conv4(X))\n",
    "    X = max_pool(X)\n",
    "    #print(X.flatten().shape)\n",
    "    X = self.fc1(X.view(100,20736))\n",
    "    X = self.fc2(X)\n",
    "    #print(X.shape)\n",
    "    #return F.softmax(X,dim=1)\n",
    "    return X\n",
    "\n",
    "if torch.cuda.is_available():\n",
    "  device = torch.device('cuda:0')\n",
    "  print('running on gpu')\n",
    "else:\n",
    "  device = torch.device('cpu')\n",
    "  print('running on cpu')\n",
    "    \n",
    "mymodel = CNN_NEW().to(device)\n",
    "\n",
    "BATCH_SIZE=100\n",
    "EPOCHS=3\n",
    "\n",
    "optimizer = optim.Adam(mymodel.parameters(),lr=0.001)\n",
    "Loss = nn.CrossEntropyLoss()\n",
    "\n",
    "batches = iter(trainloader)\n",
    "\n",
    "for e in range(EPOCHS):\n",
    "  for batch in tqdm(batches):\n",
    "    mymodel.zero_grad()\n",
    "    image, label = batch\n",
    "    image = image.to(device)\n",
    "    label = label.to(device)\n",
    "    #print(image.shape)\n",
    "\n",
    "    Y = mymodel(image)\n",
    "    #print(Y.shape,label.shape)\n",
    "    loss = Loss(Y,label)\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "  batches = iter(trainloader)\n",
    "\n",
    "tests = iter(testloader)\n",
    "correct = 0\n",
    "total = 0\n",
    "\n",
    "with torch.no_grad():\n",
    "  for batch in tqdm(tests):\n",
    "    img, lbl = batch\n",
    "    imag = img.to(device)\n",
    "    lbl = lbl.to(device)\n",
    "    Y = mymodel(imag)\n",
    "    predict = torch.argmax(Y,dim=1)\n",
    "    \n",
    "#   plt.imshow(img[1].view(28,28))\n",
    "#    plt.title(Y)\n",
    "\n",
    "    for p,l in zip(predict,lbl):\n",
    "      #print(predict,lbl)\n",
    "      if p == l:\n",
    "        correct+=1\n",
    "      total+=1\n",
    "\n",
    "print(\"Accuracy: {}%\".format((correct/total)*100))\n",
    "#print(correct,total)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Short answer\n",
    "\n",
    "1\\. How does the CNN compare in accuracy with yesterday's logistic regression and MLP models? How about training time?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "98.91%, better than LR adn MLP .Training time is better than those too also. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2\\. How many trainable parameters are there in the CNN you built for this assignment?\n",
    "\n",
    "*Note: The total of trainable parameters counts each element in a tensor. For example, a weight matrix that is 10x5 has 50 trainable parameters.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5376234 is total no. of trainable parameters in our CNN model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3\\. When would you use a CNN versus a logistic regression model or an MLP?"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "for image data since CNN is best for image classificaiton."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
